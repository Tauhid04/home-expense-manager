// Initialize the app
document.addEventListener('DOMContentLoaded', initializeApp);

// App State
let currentUser = null;
let expenses = [];

// DOM Elements
const mainAppDiv = document.getElementById('main-app');
const loginSection = document.querySelector('.login-section');
const loginForm = document.getElementById('login-form');
const loginError = document.getElementById('login-error');
const currentUserSpan = document.getElementById('current-user');
const expenseForm = document.getElementById('expense-form');
const tableBody = document.querySelector('#expenses-table tbody');
const noExpensesDiv = document.getElementById('no-expenses');
const multiItemsDiv = document.getElementById('multi-items');

// UI Functions
function showLoginError(message, isSuccess = false) {
    loginError.textContent = message;
    loginError.style.color = isSuccess ? '#10b981' : '#ef4444';
}

function showMainApp() {
    mainAppDiv.style.display = 'block';
    loginSection.style.display = 'none';
    loadExpenses();
    renderExpenses();
    setTodayDate();
}

function showLoginPage() {
    mainAppDiv.style.display = 'none';
    loginSection.style.display = 'block';
    expenses = [];
}

// Login/Signup Tab Switching
document.getElementById('show-signin').onclick = function() {
    this.classList.add('active');
    document.getElementById('show-signup').classList.remove('active');
    document.getElementById('signin-fields').style.display = 'block';
    document.getElementById('signup-fields').style.display = 'none';
    showLoginError('');
};

document.getElementById('show-signup').onclick = function() {
    this.classList.add('active');
    document.getElementById('show-signin').classList.remove('active');
    document.getElementById('signin-fields').style.display = 'none';
    document.getElementById('signup-fields').style.display = 'block';
    showLoginError('');
};

// User Management
document.getElementById('user-signup-btn').onclick = function() {
    const fullname = document.getElementById('signup-fullname').value.trim();
    const username = document.getElementById('signup-username').value.trim().toLowerCase();
    const password = document.getElementById('signup-password').value;

    if (!fullname || !username || !password) {
        showLoginError('Please fill all fields');
        return;
    }

    const users = JSON.parse(localStorage.getItem('users') || '{}');
    
    if (users[username]) {
        showLoginError('Username already exists');
        return;
    }

    users[username] = { fullname, password };
    localStorage.setItem('users', JSON.stringify(users));
    showLoginError('✓ Account created successfully!', true);

    // Clear form
    document.getElementById('signup-fullname').value = '';
    document.getElementById('signup-username').value = '';
    document.getElementById('signup-password').value = '';

    // Switch to login
    setTimeout(() => {
        document.getElementById('show-signin').click();
    }, 1500);
};

// Login Handler
loginForm.onsubmit = function(e) {
    e.preventDefault();

    const username = document.getElementById('login-username').value.trim().toLowerCase();
    const password = document.getElementById('login-password').value;

    if (!username || !password) {
        showLoginError('Please enter username and password');
        return;
    }

    const users = JSON.parse(localStorage.getItem('users') || '{}');
    const user = users[username];

    if (!user) {
        showLoginError('User not found');
        return;
    }

    if (user.password !== password) {
        showLoginError('Incorrect password');
        return;
    }

    currentUser = { username, fullname: user.fullname };
    localStorage.setItem('currentUser', JSON.stringify(currentUser));

    showLoginError('✓ Login successful!', true);
    currentUserSpan.textContent = `Welcome, ${user.fullname}`;
    
    // Clear login form
    document.getElementById('login-username').value = '';
    document.getElementById('login-password').value = '';

    setTimeout(showMainApp, 1000);
};

// Expense Management
function loadExpenses() {
    if (!currentUser) return;
    
    try {
        const savedExpenses = localStorage.getItem(`expenses_${currentUser.username}`);
        expenses = savedExpenses ? JSON.parse(savedExpenses) : [];
    } catch (error) {
        console.error('Error loading expenses:', error);
        expenses = [];
    }
}

function saveExpenses() {
    if (!currentUser) return;
    localStorage.setItem(`expenses_${currentUser.username}`, JSON.stringify(expenses));
}

function renderExpenses() {
    if (!currentUser) return;

    tableBody.innerHTML = '';
    
    if (expenses.length === 0) {
        noExpensesDiv.style.display = 'block';
        renderSummary();
        return;
    }
    
    noExpensesDiv.style.display = 'none';
    
    expenses.forEach((expense, index) => {
        const tr = document.createElement('tr');
        tr.innerHTML = `
            <td>Tk ${parseFloat(expense.amount).toFixed(2)}</td>
            <td>${expense.category}</td>
            <td>${expense.date}</td>
            <td>${expense.description || ''}</td>
            <td class="delete">
                <button class="delete-btn" data-idx="${index}">Delete</button>
            </td>
            <td>${currentUser.username}</td>
        `;
        tableBody.appendChild(tr);
    });

    renderSummary();
}

function renderSummary() {
    if (!currentUser) return;

    // Create or get summary section
    let summarySection = document.getElementById('summary-section');
    if (!summarySection) {
        summarySection = document.createElement('section');
        summarySection.id = 'summary-section';
        mainAppDiv.insertBefore(summarySection, document.querySelector('section:last-child'));
    }

    // Calculate totals
    const monthlyTotals = {};
    let total = 0;

    expenses.forEach(exp => {
        const amount = parseFloat(exp.amount);
        total += amount;
        
        const date = new Date(exp.date);
        const monthKey = `${date.getFullYear()}-${String(date.getMonth() + 1).padStart(2, '0')}`;
        monthlyTotals[monthKey] = (monthlyTotals[monthKey] || 0) + amount;
    });

    // Render summary
    summarySection.innerHTML = `
        <h2>Expense Summary</h2>
        <div class="summary-grid">
            <div class="summary-card">
                <h3>Total Expenses</h3>
                <p>Tk ${total.toFixed(2)}</p>
            </div>
            <div class="summary-card">
                <h3>Monthly Breakdown</h3>
                <ul>
                    ${Object.entries(monthlyTotals)
                        .sort((a, b) => b[0].localeCompare(a[0]))
                        .map(([month, amount]) => `<li>${month}: Tk ${amount.toFixed(2)}</li>`)
                        .join('')}
                </ul>
            </div>
        </div>
    `;
}

// Handle expense form submission
expenseForm.addEventListener('submit', function(e) {
    e.preventDefault();
    
    if (!currentUser) return;

    const rows = multiItemsDiv.querySelectorAll('.expense-row');
    let added = false;

    rows.forEach(row => {
        const amount = row.querySelector('.amount').value.trim();
        const category = row.querySelector('.category').value;
        const date = row.querySelector('.date').value;
        const description = row.querySelector('.description').value.trim();

        if (!amount || !category || !date) return;

        expenses.unshift({
            amount: parseFloat(amount),
            category,
            date,
            description
        });
        added = true;
    });

    if (added) {
        saveExpenses();
        renderExpenses();
        
        // Reset form
        multiItemsDiv.innerHTML = `
            <div class="expense-row">
                <input type="number" class="amount form-step active expense-input" placeholder="Amount (Tk)" min="0.01" step="0.01" required>
                <select class="category form-step expense-input" required>
                    <option value="" disabled selected>Category</option>
                    <option>Food</option>
                    <option>Transport</option>
                    <option>Bills</option>
                    <option>Shopping</option>
                    <option>Other</option>
                </select>
                <input type="date" class="date form-step expense-input" required>
                <input type="text" class="description form-step expense-input" placeholder="Description" maxlength="40">
            </div>
        `;
        setTodayDate();
    } else {
        alert('Please fill at least one complete row to add expenses.');
    }
});

// Handle delete button clicks
tableBody.addEventListener('click', function(e) {
    if (!currentUser || !e.target.classList.contains('delete-btn')) return;
    
    const idx = e.target.getAttribute('data-idx');
    expenses.splice(idx, 1);
    saveExpenses();
    renderExpenses();
});

// Add new expense row button
document.getElementById('add-item-btn').addEventListener('click', function() {
    const row = document.createElement('div');
    row.className = 'expense-row';
    row.innerHTML = `
        <input type="number" class="amount form-step active expense-input" placeholder="Amount (Tk)" min="0.01" step="0.01" required>
        <select class="category form-step expense-input" required>
            <option value="" disabled selected>Category</option>
            <option>Food</option>
            <option>Transport</option>
            <option>Bills</option>
            <option>Shopping</option>
            <option>Other</option>
        </select>
        <input type="date" class="date form-step expense-input" required>
        <input type="text" class="description form-step expense-input" placeholder="Description" maxlength="40">
        <button type="button" class="remove-item-btn">Remove</button>
    `;
    multiItemsDiv.appendChild(row);

    row.querySelector('.remove-item-btn').onclick = () => row.remove();
    row.querySelector('.date').valueAsDate = new Date();
});

// Utility function to set today's date
function setTodayDate() {
    document.querySelectorAll('.date').forEach(input => {
        input.valueAsDate = new Date();
    });
}

// Add logout button
const userInfo = document.createElement('div');
userInfo.className = 'user-info';
userInfo.style.display = 'flex';
userInfo.style.alignItems = 'center';
userInfo.style.gap = '1rem';
userInfo.style.marginBottom = '1rem';

const logoutBtn = document.createElement('button');
logoutBtn.textContent = 'Logout';
logoutBtn.className = 'nav-btn';
logoutBtn.onclick = () => {
    if (confirm('Are you sure you want to logout?')) {
        currentUser = null;
        localStorage.removeItem('currentUser');
        showLoginPage();
        document.getElementById('show-signin').click();
    }
};

mainAppDiv.insertBefore(userInfo, mainAppDiv.firstChild);
userInfo.appendChild(currentUserSpan);
userInfo.appendChild(logoutBtn);

// Check for existing session
const savedUser = localStorage.getItem('currentUser');
if (savedUser) {
    currentUser = JSON.parse(savedUser);
    currentUserSpan.textContent = `Welcome, ${currentUser.fullname}`;
    showMainApp();
} else {
    showLoginPage();
}

// Initialize date fields
setTodayDate();
